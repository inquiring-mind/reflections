1. What happens when you initialize a repository? Why do you need to do it?
>> When you initialize a repository it creates a .git folder. 
Each git repository is tied to a specific directory - the directory where you ran 'git init' command. Only the files from this directory and its subdirectories will be in the git repository. 

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
>> Staging area stories files that have not been committed yet. This gives an opportunity to logically group related files to be commited while working on other files in the working directory. 

3. How can you use the staging area to make sure you have one commit per logical change?
>> We can add files to the staging area using 'git add' once a logical change is done. This ensures that you can keep modifying other files. 

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help? 
>> Branches would be very useful in case there are multiple features going on or if someone wants to try something very new and not affect the current codebase. 

5. How do the diagrams help you visualize the branch structure?
>> Since there could be multiple branches, the diagrams help visualize where the branching occured and how many files got checked in after the fork. 

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
>> Merging two branches together makes one branch have changes from both branches. This is useful when multiple people work on different branches and both changes are needed in the final version. 

7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging is very good for files with no conflict. If we have to do it manually and if there are many files, it would be too cumbersome and error prone. 

